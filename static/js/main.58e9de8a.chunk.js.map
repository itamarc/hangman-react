{"version":3,"sources":["components/HangmanImg.js","components/LetterForm.js","components/WordForm.js","components/Controls.js","components/WordCol.js","components/Word.js","components/Letters.js","components/Game.js","App.js","index.js"],"names":["HangmanImg","props","parts","partsShown","slice","wrongLetters","length","hide","part","style","strokeOpacity","path","map","selector","onElementSelected","lastsel","console","log","LetterForm","useState","letter","setLetter","onSubmit","e","preventDefault","trim","onNewLetter","alert","type","placeholder","size","maxLength","name","value","onChange","target","toUpperCase","autoFocus","className","WordForm","word","setWord","onNewWord","Controls","gameStarted","setGameStarted","id","result","newWord","WordCol","rightLetters","includes","Word","gtc","repeat","ltrkey","gridTemplateColumns","split","ltr","Letters","Game","state","setState","rl","complete","i","charAt","noMissingLetters","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.58e9de8a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { SvgLoader, SvgProxy } from 'react-svgmt';\r\n\r\nfunction HangmanImg(props) {\r\n    const parts = ['head', 'body', 'left-arm', 'right-arm', 'left-leg', 'right-leg'];\r\n    const partsShown = parts.slice(0, props.wrongLetters.length);\r\n\r\n    function show(part) {\r\n        part.style.strokeOpacity = 1;\r\n    }\r\n\r\n    function hide(part) {\r\n        part.style.strokeOpacity = 0;\r\n    }\r\n    \r\n    if (props.wrongLetters.length === 0){\r\n        return (\r\n            <>\r\n            <SvgLoader path='./hangman.svg'>\r\n                {parts.map(part => (\r\n                <SvgProxy\r\n                    key={part}\r\n                    selector={'#'+part}\r\n                    onElementSelected={hide}\r\n                />\r\n                ))}\r\n            </SvgLoader>\r\n            </>\r\n        );\r\n    } else {\r\n        var lastsel = \"#\" + partsShown[partsShown.length-1];\r\n        console.log(lastsel);\r\n        return (\r\n            <>\r\n            <SvgLoader path='./hangman.svg'>\r\n                <SvgProxy\r\n                    selector={lastsel}\r\n                    onElementSelected={show}\r\n                />\r\n            </SvgLoader>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default HangmanImg;\r\n","import React, { useState } from \"react\";\r\n\r\nfunction LetterForm(props) {\r\n    const [letter, setLetter] = useState(\"\")\r\n\r\n    const onChange = e => {\r\n        setLetter(e.target.value.toUpperCase());\r\n    }\r\n\r\n    const submitLetter = (e) => {\r\n        e.preventDefault();\r\n        if (letter.trim()) {\r\n            props.onNewLetter(letter);\r\n            setLetter(\"\");\r\n        } else {\r\n            alert(\"Please write a letter.\")\r\n        }\r\n    }\r\n\r\n    return (\r\n            <form onSubmit={submitLetter}>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Letter\"\r\n                    size=\"3\"\r\n                    maxLength=\"1\"\r\n                    name=\"letter\"\r\n                    value={letter}\r\n                    onChange={onChange}\r\n                    autoFocus\r\n                />\r\n                <button className=\"btn\">Guess</button>\r\n            </form>\r\n    );\r\n}\r\n\r\nexport default LetterForm;\r\n","import React, { useState } from \"react\";\r\n\r\nfunction WordForm(props) {\r\n    const [word, setWord] = useState(\"\")\r\n\r\n    const onChange = e => {\r\n        setWord(e.target.value.toUpperCase());\r\n    }\r\n\r\n    const submitWord = (e) => {\r\n        e.preventDefault();\r\n        if (word.trim()) {\r\n            props.onNewWord(word);\r\n            setWord(\"\");\r\n        } else {\r\n            alert(\"Please write a word.\")\r\n        }\r\n    }\r\n\r\n    return (\r\n            <form onSubmit={submitWord}>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder=\"Type a word\"\r\n                    size=\"15\"\r\n                    name=\"word\"\r\n                    value={word}\r\n                    onChange={onChange}\r\n                    autoFocus\r\n                />\r\n                <button className=\"btn\">Start!</button>\r\n            </form>\r\n    );\r\n}\r\n\r\nexport default WordForm;\r\n","import React, { useState } from \"react\";\r\nimport LetterForm from \"./LetterForm\";\r\nimport WordForm from \"./WordForm\";\r\n\r\nfunction Controls(props) {\r\n    const [gameStarted, setGameStarted] = useState(props.gameStarted);\r\n\r\n    const submitWord = (newWord) => {\r\n        setGameStarted(true);\r\n        props.onNewWord(newWord);\r\n    }\r\n\r\n    const submitLetter = (letter) => {\r\n        setGameStarted(props.onNewLetter(letter));\r\n    }\r\n\r\n    return (\r\n        <div id=\"controls\">\r\n            { gameStarted && props.result === 0 ?\r\n            <LetterForm onNewLetter={submitLetter} />\r\n            :\r\n            <WordForm onNewWord={submitWord} />\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Controls;\r\n","import React from \"react\";\r\n\r\nfunction WordCol(props) {\r\n    if (props.rightLetters.includes(props.letter)) {\r\n        return (\r\n            <div className=\"wordcol\">{props.letter}</div>\r\n        );\r\n    } else if (props.result === 2) {\r\n        return (\r\n            <div className=\"wordcol missedletter\">{props.letter}</div>\r\n        );\r\n    } else {\r\n        return (\r\n            <div className=\"wordcol\">&nbsp;</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default WordCol\r\n","import React from \"react\";\r\nimport WordCol from \"./WordCol\";\r\n\r\nfunction Word(props) {\r\n    const gtc = '1fr '.repeat(props.word.length);\r\n    var ltrkey = '';\r\n    return (\r\n        <div id=\"worddiv\">\r\n            <h2>Word</h2>\r\n            <div id=\"wordframe\" style={{gridTemplateColumns: gtc}}>\r\n                {props.word.split('').map(ltr => (\r\n                    <WordCol key={ltrkey += ltr} letter={ltr} rightLetters={props.rightLetters} result={props.result} />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Word;\r\n","import React from \"react\";\r\n\r\nfunction Letters(props) {\r\n    if (props.result === 0) {\r\n        var ltrkey = '';\r\n        return (\r\n        <div id=\"lettersdiv\">\r\n            <h2>Letters Not In The Word</h2>\r\n            {props.wrongLetters.map(ltr => (\r\n                <div key={ltrkey += ltr} className=\"letternotfound\">{ltr}</div>\r\n            ))}\r\n        </div>\r\n        );\r\n    } else if (props.result === 1) {\r\n        return (\r\n        <div id=\"lettersdiv\" className=\"wondiv\"><h3 className=\"won\">You have WON!</h3></div>\r\n        );\r\n    } else {\r\n        return (\r\n        <div id=\"lettersdiv\"><h3>You have lost!</h3></div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Letters;\r\n","import React, { useState } from \"react\";\r\nimport HangmanImg from './HangmanImg';\r\nimport Controls from './Controls';\r\nimport Word from './Word';\r\nimport Letters from './Letters';\r\n\r\nfunction Game() {\r\n    const [state, setState] = useState({\r\n        word: \"\",\r\n        rightLetters: [],\r\n        wrongLetters: [],\r\n        result: 0 // 0 - no result yet; 1 - win; 2 - lost\r\n    });\r\n\r\n    function noMissingLetters(rl) {\r\n        var complete = true;\r\n        for (let i = 0; i < state.word.length; i++) {\r\n            if (!rl.includes(state.word.charAt(i))) {\r\n                complete = false;\r\n            }\r\n        }\r\n        return complete;\r\n    }\r\n\r\n    function handleNewLetter(letter) {\r\n        var gameOngoing = true;\r\n        if (letter === \"\") {\r\n            return;\r\n        }\r\n        // check if the new letter is in the word\r\n        // if it is and it's not on rightLetters\r\n        if (state.word.includes(letter) && !state.rightLetters.includes(letter)) {\r\n            // show new letter on Word\r\n            setState({\r\n                ...state,\r\n                rightLetters: [...state.rightLetters, letter]\r\n            });\r\n            // if word complete\r\n            if (noMissingLetters([...state.rightLetters, letter])) {\r\n                // show \"you won\" message\r\n                setState({\r\n                    ...state,\r\n                    rightLetters: [...state.rightLetters, letter],\r\n                    result: 1\r\n                });\r\n            }\r\n        }\r\n        // if it's not and it's not on wrongLetters\r\n        if (!state.word.includes(letter) && !state.wrongLetters.includes(letter)) {\r\n            // add new letter on Letters\r\n            setState({\r\n                ...state,\r\n                wrongLetters: [...state.wrongLetters, letter]\r\n            });\r\n            // show new part on image\r\n            // if last part\r\n            if (state.wrongLetters.length+1 >= 6) {\r\n                // Show \"you lost\" message\r\n                setState({\r\n                    ...state,\r\n                    wrongLetters: [...state.wrongLetters, letter],\r\n                    result: 2\r\n                });\r\n                // reset controls state\r\n            }\r\n        }\r\n        return gameOngoing;\r\n    }\r\n\r\n    function handleNewWord(newWord) {\r\n        setState({\r\n            word: newWord,\r\n            rightLetters: [],\r\n            wrongLetters: [],\r\n            result: 0\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div id=\"hangmandiv\">\r\n            <HangmanImg wrongLetters={state.wrongLetters} />\r\n            <Controls gameStarted={(state.word !== \"\")} onNewLetter={handleNewLetter} onNewWord={handleNewWord} result={state.result} />\r\n            <Word word={state.word} rightLetters={state.rightLetters} result={state.result} />\r\n            <Letters wrongLetters={state.wrongLetters} result={state.result} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Game;\r\n","import './App.css';\r\nimport Game from './components/Game'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Hangman Game</h1>\r\n      <Game/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}